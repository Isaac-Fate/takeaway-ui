"use client";

import { useEffect, useRef, useState } from "react";

import { cn } from "@/lib/utils";

import * as pdfjsLib from "pdfjs-dist";

// @ts-ignore
// import * as pdfjsWorker from "pdfjs-dist/build/pdf.worker.mjs";

// Set the worker
pdfjsLib.GlobalWorkerOptions.workerSrc = new URL(
  "pdfjs-dist/build/pdf.worker.min.mjs",
  import.meta.url,
).toString();

interface PDFViewerProps {
  className?: string;
  src: string;
}

export function PDFViewer({ className, src }: PDFViewerProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  console.log(pdfjsLib);

  useEffect(() => {
    // Get the canvas element
    const canvas = canvasRef.current;

    if (canvas === null) {
      console.error("canvas element not found");
      return;
    }

    pdfjsLib.getDocument(src).promise.then((pdf) => {
      console.log(pdf);

      pdf.getPage(50).then((page) => {
        // Get the viewport of the page
        const viewport = page.getViewport({ scale: 1 });

        // Set the canvas dimensions to match the PDF page size
        const factor = 4;
        canvas.width = viewport.width * factor;
        canvas.height = viewport.height * factor;

        canvas.style.height = `${viewport.height}px`; //showing size will be smaller size
        canvas.style.width = `${viewport.width}px`;

        // Get the canvas context
        const canvasContext = canvas.getContext("2d");

        if (canvasContext === null) {
          console.error("canvas context not found");
          return;
        }

        page.render({
          canvasContext,
          viewport,
          transform: [factor, 0, 0, factor, 0, 0],
        });
      });
    });
  }, []);

  return (
    <div
      className={cn(
        "h-full w-full overflow-clip rounded-md border-2",
        className,
      )}
    >
      <canvas ref={canvasRef} className="w-full border-2"></canvas>
    </div>
  );
}
